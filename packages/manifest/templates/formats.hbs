/**
 * This file was automatically generated by templates/formats.hbs.
 * DO NOT MODIFY IT BY HAND. Instead, modify templates/formats.hbs,
 * and run build script to regenerate this file.
 */

use serde_json::Value;
use serde::{Serialize, Deserialize};
use polywrap_schemafy::schemafy;

{{#each formats}}
schemafy!(
  root: WrapManifest{{fsuffix format}}
  "schemas/{{format}}.json"
);

{{/each}}

#[derive(Clone)]
pub enum AnyManifest {
  {{#each formats}}
  WrapManifest{{fsuffix format}}(WrapManifest{{fsuffix format}}),
  {{/each}}
}

impl AnyManifest {
  pub fn format(&self) -> String {
    match self {
      {{#each formats}}
      AnyManifest::WrapManifest{{fsuffix format}}(_) => "{{format}}".to_string(),
      {{/each}}
    }
  }

    pub fn from_json_value(value: Value) -> Self {
        match value["format"].as_str().unwrap() {
            {{#each formats}}
            "{{format}}" => AnyManifest::WrapManifest{{fsuffix format}}(serde_json::from_value(value).unwrap()),
            {{/each}}
            _ => panic!("Invalid manifest format"),
        }
    }

    pub fn to_json_value(&self) -> Value {
        match self {
            {{#each formats}}
            AnyManifest::WrapManifest{{fsuffix format}}(manifest) => serde_json::to_value(manifest).unwrap(),
            {{/each}}
        }
    }
}

pub const LATEST_MANIFEST_FORMAT: &str = "{{latest_format}}";
pub type WrapManifest = WrapManifest{{fsuffix latest_format}};